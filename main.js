const { Telegraf } = require('telegraf');
const { User } = require('./db'); 
require('dotenv').config();
const bot = new Telegraf(`${process.env.BOT_TOKEN}`); 

bot.start(async (ctx) => {
  const userId = ctx.message.from.id;

  const userExist = await User.findOne({ where: { telegram_id: userId } });

  if (userExist) {
    return ctx.reply('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –¥–∞–Ω–Ω—ã–µ');
  }

  const keyboard = {
    reply_markup: {
      one_time_keyboard: true,
      resize_keyboard: true, 
      keyboard: [
        [{ text: "üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", request_contact: true }],
      ],
    },
  };
  const startMessage = `<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n`


  await ctx.replyWithPhoto(
    {source : './photo.jpg'},
    {
      caption: startMessage, 
      parse_mode: 'HTML', 
      ...keyboard,
    }
  );
});





bot.on('message', async (ctx) => {
  if (ctx.message && ctx.message.from) {
    const id = ctx.message.from.id; 
    const username = ctx.message.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const contact = ctx.message.contact?.phone_number || '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';

    console.log(`ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${id}`);
    console.log(`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${username}`);
    console.log(`–¢–µ–ª–µ—Ñ–æ–Ω: ${contact}`);

    try {
      
      await User.findOrCreate({
        where: { telegram_id: id },
        defaults: {
          username: username,
          phone_number: contact,
        },
      });

      await ctx.reply(`–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ${username}`);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', err.message);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
    }
  } else {
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
  }
});


(async () => {
  try {
    await bot.launch();
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err.message);
  }
})();


process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
